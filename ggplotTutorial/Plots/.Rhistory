knitr::opts_chunk$set(echo = TRUE)
# Uncomment the next lines (remove the first #) to install the packages
# install.packages(packages)
# remotes::install_github("hrbrmstr/hrbrthemes")
# Load standard packages
library(ggplot2)
library(dplyr)
mpg_counted <- mpg %>%
count(class, name = 'count')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
ggplot(mpg_counted) +
geom_col(aes(x = class, y = count))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loads iris into our environment
data(iris)
#  Prints the top of iris
head(iris)
# Loads iris into our environment
data(iris)
#  Prints the top of iris
head(iris)
For the iris dataset, the rows are samples, the columns are variables, and each cell contains a single value. This is known as **tidy data**. Tidy data is what ggplot expects as input. Data in the wild may not be tidy, especially in the bioinformatics field where there are many different filetypes. Data may require prior import and manipulation (data wrangling) which is outside of the scope of this tutorial.
Here is the first example of a ggplot. The `ggplot` function call is passed the arguments `data` and `mapping` to specify the data and map data to aesthetics, respectively. We have to define our mappings in the `aes()` call, where we choose the **x** and **y** coordinates. We then "add" a geometry with the `geom_<object>` function, in this case choosing  `point` for scatterplot of **x** and **y**.
**Data** mapped to **aes**thetic properties of **geom**etric objects!
```{r}
#  Scatterplot
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width), ) +
geom_point()
#  Scatterplot
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width), ) +
geom_point()
```{r}
The following code is equivalent:
#  Scatterplot
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width), ) +
geom_point()
#  Scatterplot
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width), ) +
geom_point()
```{r}
#  Scatterplot
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width), ) +
geom_point()
# Nothing is inherited from ggplot; no global mappings
# If we added another layer it would have to have data and mappings reset
ggplot() +
geom_point(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width))
# Using an expression to colour the points
ggplot(iris) +
geom_point(aes(x = Petal.Length,
y = Petal.Width,
colour = Petal.Length < 2))
ggplot(iris) +
geom_point(aes(x = Petal.Length, y = Petal.Width),
colour = "green" )
# not the plot we expected
ggplot(iris) +
geom_point(aes(x = Petal.Length, y = Petal.Width, colour = "green"))
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, shape = Species, colour = Species)) +
geom_point()
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species, size = Sepal.Width)) +
geom_point()
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
scale_x_continuous(breaks = c(3, 5, 6)) +
scale_y_continuous(trans = 'log10')
# adding transparency, specific to the point layer.
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(colour = Species, size = Sepal.Width), alpha = 0.4)
# All layers will inherit from the base call of ggplot2
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
geom_smooth()
# only the point layer inherits the colour mapping
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(colour = Species)) +
geom_smooth(method = "lm")
# All layers will inherit from the base call of ggplot2
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
geom_smooth()
# only the point layer inherits the colour mapping
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(colour = Species)) +
geom_smooth(method = "lm")
# All layers will inherit from the base call of ggplot2
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
geom_smooth()
# only the point layer inherits the colour mapping
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(colour = Species)) +
geom_smooth(method = "lm")
ggplot(iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30)
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = 30)
?mpg
# miles per gallon highway
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = 50)
data("diamonds")
ggplot(diamonds, aes(x = carat)) +
geom_histogram()
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(bins = 100)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(100)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 100)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 200)
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(position = "dodge")
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(\)
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram()
ggplot(diamonds, aes(x = carat)) +
geom_histogram()
data("diamonds")
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 40)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 50)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 100)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 200)
?diamonds
?geom_histogram
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(position = "dodge")
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram()
ggplot(iris, aes(x = Petal.Length,  colour = Species)) +
geom_freqpoly()
ggplot(iris) +
geom_bar(aes(x = Species))
ggplot(mpg) +
geom_bar(aes(x = class))
?geom_smooth
?geom_histogram
geom_bar
?geom_bar
ggplot(mpg) +
geom_bar(aes(x = class))
ggplot(mpg) +
geom_bar(aes(x = class), stat = after_stat("prop"))
ggplot(mpg) +
geom_bar(aes(x = class), stat = after_stat(prop))
ggplot(mpg) +
geom_bar(aes(x = class), stat = after_stat(count))
ggplot(mpg) +
geom_bar(aes(x = class))
library(dplyr)
iris_counted <- iris %>%
count(Species, name = 'count')
mpg_counted <- mpg %>%
count(class, name = 'count')
mpg_counted <- mpg %>%
count(class, name = 'count')
mpg_counted
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
ggplot(mpg_counted) +
geom_bar(aes(x = Species, y = after_stat(100 * count / sum(count))))
ggplot(mpg_counted) +
geom_bar(aes(x = Species, y = after_stat(100 * count / sum(count))))
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = after_stat(100 * count / sum(count))))
gplot(mpg) +
geom_bar(aes(x = class, y = after_stat(100 * count / sum(count))))
ggplot(mpg) +
geom_bar(aes(x = class, y = after_stat(100 * count / sum(count))))
ggplot(mpg_counted) +
geom_col(aes(x = class, y = count))
ggplot(mpg) +
geom_bar(aes(x = class, y = after_stat(100 * count / sum(count))))
ggplot(mpg) +
geom_point(aes(x = disp, y = hwy, colour = class, size = cyl))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size_area(breaks = c(4,5,6,8))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size(breaks = c(4,5,6,8))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size_area(breaks = c(4,5,6,8))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size_area(breaks = c(4,5,6,8))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size(breaks = c(4,5,6,8))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size_area(breaks = c(4,5,6,8))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size(breaks = c(4,5,6,8))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size_area(breaks = c(4,5,6,8))
install.packages("ggbrewer")
install.packages("colorbrewer")
install.packages("ggthemes")
library(ggthemes)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
ggthemes::theme_tufte()
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
ggthemes::theme_solarized()
install.packages("RColorBrewer")
library(RColorBrewer)
library(RColorBrewer)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size_area(breaks = c(4,5,6,8)) +
scale_colour_brewer()
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
scale_size_area(breaks = c(4,5,6,8)) +
scale_colour_brewer(type = 'qual')
ggplot(mpg) +
geom_point(aes(x = cyl, y = hwy))
ggplot(mpg) +
geom_point(aes(x = cyl, y = hwy)) +
scale_x_continuous(breaks = c(4,5,6,8))
ggplot(mpg) +
geom_point(aes(x = cyl, y = hwy)) +
scale_x_binned(breaks = c(4,5,6,8))
ggplot(iris) +
geom_density(aes(x = Petal.Width))
ggplot(mpg) +
geom_density(aes(x = hwy))
ggplot(mpg) +
geom_density(aes(x = hwy, color = class))
ggplot(mpg) +
geom_density(aes(x = hwy, fill = class))
ggplot(iris) +
geom_density(aes(x = Sepal.Width, fill = class))
ggplot(iris) +
geom_density(aes(x = Sepal.Width))
ggplot(iris) +
geom_density(aes(x = Sepal.Height))
ggplot(iris) +
geom_density(aes(x = Sepal.Length))
ggplot(iris) +
geom_density(aes(x = Petal.Width))
ggplot(iris) +
geom_density(aes(x = Petal.Length))
ggplot(iris) +
geom_density(aes(x = Petal.Length, colour = Species))
ggplot(iris) +
geom_density(aes(x = Petal.Width, colour = Species))
ggplot(iris) +
geom_density(aes(x = Petal.Length, y = after_stat(scaled), colour = Species))
ggplot(iris) +
geom_density(aes(x = Petal.Length))
ggplot(iris) +
geom_density(aes(x = Petal.Length, y = after_stat(scaled)))
ggplot(iris, aes(x = Petal.Length,  fill = Species)) +
geom_freqpoly()
ggplot(iris, aes(x = Petal.Length,  colour = Species)) +
geom_freqpoly()
library(patchwork)
ggplot(iris) +
geom_density(aes(x = Petal.Length, fill = Species), alpha = 0.5)
ggplot(iris) +
geom_density(aes(x = Petal.Length, y = after_stat(scaled), fill = Species), alpha = 0.5)
p1 + p2
p1 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, fill = Species), alpha = 0.5)
p2 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, y = after_stat(scaled), fill = Species), alpha = 0.5)
p1 + p2
p1 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, fill = Species), alpha = 0.5) +
theme(legend = element_blank())
p1 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, fill = Species), alpha = 0.5) +
theme(legend.text = element_blank())
p2 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, y = after_stat(scaled), fill = Species), alpha = 0.5)
p1 + p2
p1 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, fill = Species), alpha = 0.5) +
theme(legend.position = "none")
p2 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, y = after_stat(scaled), fill = Species), alpha = 0.5)
p1 + p2
library(patchwork)
p1 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, fill = Species), alpha = 0.5) +
theme(legend.position = "none")
p2 <- ggplot(iris) +
geom_density(aes(x = Petal.Length, y = after_stat(scaled), fill = Species), alpha = 0.5)
p1 + p2
ggplot(iris, aes(x = Species, y = Petal.Width))+
stat_boxplot()
ggplot(iris) +
geom_jitter(aes(x = Species, y = Petal.Width), width = 0.2) +
stat_summary(aes(x = Species, y = Petal.Width), fun = mean, geom = "point", colour = "red", size = 3)
library(patchwork)
data(mpg)
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
p2 <- ggplot(mpg, aes(x = displ, y = hwy, colour = class)) + geom_point()
p1 + p2
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~ class)
```{r}
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(year ~ drv)
states <- c(
'eaten', "eaten but said you didn\'t", 'cat took it', 'for tonight',
'will decompose slowly'
)
pie <- data.frame(
state = factor(states, levels = states),
amount = c(4, 3, 1, 1.5, 6),
stringsAsFactors = FALSE
)
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state))
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) +
coord_polar()
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) + coord_munch()
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) + coord_polar()
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state))
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) +
coord_polar(theta = 'y')
states <- c(
'Use regularly', "Used a handful of times", 'Used once', 'Never used',
'will decompose slowly'
)
states <- c(
'Use regularly', "Used a handful of times", 'Used once', 'Never used'
)
pie <- data.frame(
state = factor(states, levels = states),
amount = c(4, 3, 1, 1.5),
stringsAsFactors = FALSE
)
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state))
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) +
coord_polar(theta = 'y')
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) +
coord_polar(theta = 'y') +
theme(legend.title = "R users in the lab")
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) +
coord_polar(theta = 'y') +
theme(legend.title = "R users in the lab")
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) +
coord_polar(theta = 'y')
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) +
coord_polar(theta = 'y') +
theme(legend.title = element_text("Hello"))
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = state)) +
coord_polar(theta = 'y') +
guides(fill = guide_legend(title = "R users in the lab"))
?coord_polar
