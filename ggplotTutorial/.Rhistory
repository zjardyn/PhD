p2
# Position
p2 + theme(legend.position = "none")
p2 + theme(legend.justification = "top")
p2 + theme(legend.position = "bottom")
# Or place legends inside the plot using relative coordinates between 0 and 1
# legend.justification sets the corner that the position refers to
p2 + theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6)
)
# The legend.box properties work similarly for the space around
# all the legends
p2 + theme(
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6)
)
# You can also control the display of the keys
# and the justification related to the plot area can be set
p2 + theme(legend.key = element_rect(fill = "white", colour = "black"))
p2 + theme(legend.text = element_text(size = 8, colour = "red"))
p2 + theme(legend.title = element_text(face = "bold"))
# Strips --------------------------------------------------------------------
p3 <- ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_wrap(~ cyl)
p3
p3 + theme(strip.background = element_rect(colour = "black", fill = "white"))
p3 + theme(strip.text.x = element_text(colour = "white", face = "bold"))
p3 + theme(panel.spacing = unit(1, "lines"))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
xlab("Vehicle Displacement (L)") +
ylab("Highway Miles per Gallon") +
ggtitle(expression(italic("Pseudomonas putida"))) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 18, colour = "orange"))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
xlab("Vehicle Displacement (L)") +
ylab("Highway Miles per Gallon") +
ggtitle(expression(italic("Cars..."))) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 18, colour = "orange"))
ggplot(iris, aes(x = Species, y = Petal.Length, colour = Species)) +
geom_boxplot()
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot()
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme(legend.box = element_blank())
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme(legend = element_blank())
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme(legend = element_blank())
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme(legend.position = "None")
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme(legend.position = "None") +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme(legend.position = "None") +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
?theme_bw
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme(legend.position = "None") +
theme_bw()
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme(legend.position = "None") +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "None")
install.packages("viridislite")
install.packages("viridisLite")
library(viri)
library(viridisLite)
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "None") +
scale_fill_viridis_b()
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "None") +
scale_fill_viridis_c()
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "None") +
scale_fill_viridis_d()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.height = 3)
# Loading the package so that we can use it
library(ggplot2)
# Loads iris into our environment.
data(iris)
force(iris)
#  Prints the top 6 rows of iris
head(iris)
#  Scatterplot
ggplot(data = iris, mapping = aes(x = Petal.Length,  y = Petal.Width)) +
geom_point()
# Nothing is inherited from ggplot; no global mappings
ggplot() +
geom_point(data = iris, aes(x = Petal.Length, y = Petal.Width))
# aes() assumes x,y coordinates
ggplot(iris) +
geom_point(aes(Petal.Length, Petal.Width))
# Using an expression to colour the points
ggplot(iris) +
geom_point(aes(x = Petal.Length,
y = Petal.Width,
colour = Petal.Length < 2))
ggplot(iris) +
geom_point(aes(x = Petal.Length, y = Petal.Width), colour = "green")
# Not the plot we expected
ggplot(iris) +
geom_point(aes(x = Petal.Length, y = Petal.Width, colour = "green"))
# Not the plot we expected
ggplot(iris) +
geom_point(aes(x = Petal.Length, y = Petal.Width, colour = "goose"))
ggplot(iris, aes(x = Petal.Length,
y = Petal.Width,
colour = Species,
shape = Species)) +
geom_point()
# Adding aesthetic mappings to the point layer
ggplot(iris, aes(x = Petal.Length,
y = Petal.Width)) +
geom_point(aes(colour = Species, size = Sepal.Width))
# Adding transparency
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(colour = Species, size = Sepal.Width), alpha = 0.4)
?geom_point
# Adding transparency
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(colour = Species, size = Sepal.Width, alpha = Sepal.Length))
# Adding transparency
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(colour = Species, size = Sepal.Width), alpha = 0.4)
# All layers will inherit these aesthetic mappings
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
geom_smooth()
# Only the point layer uses the colour mapping
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(colour = Species)) +
geom_smooth()
?geom_smooth
# All layers will inherit these aesthetic mappings
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black")
```{r, fig.height= 2.8}
# All layers will inherit these aesthetic mappings
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
geom_smooth()
data("diamonds")
force(diamonds)
# Histogram mapped to one numerical variable
ggplot(diamonds, aes(x = carat)) +
geom_histogram()
# Adjusting the number of bins
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 200)
# Stacked histogram
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram()
# Stacked histogram
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(position = "dodge")
# Frequency polygon
ggplot(iris, aes(x = Petal.Length,  colour = Species)) +
geom_freqpoly()
# Frequency polygon
ggplot(diamond, aes(x = carat,  colour = cut)) +
geom_freqpoly()
# Frequency polygon
ggplot(diamonds, aes(x = carat,  colour = cut)) +
geom_freqpoly()
# Stacked histogram
ggplot(diamonds, aes(x = caret, fill = cut)) +
geom_histogram()
# Stacked histogram
ggplot(diamonds, aes(x = carat, fill = cut)) +
geom_histogram()
# Stacked histogram
ggplot(diamonds, aes(x = carat, fill = cut)) +
geom_histogram(bins = 40)
# Stacked histogram
ggplot(diamonds, aes(x = carat, fill = cut)) +
geom_histogram()
# The class variable is categorical, with each level being a different type of vehicle
data(mpg)
force(mpg)
ggplot(mpg) +
geom_bar(aes(x = class))
?geom_bar
# We can also directly use stat_count...
ggplot(mpg) +
stat_count(aes(x = class))
# loading dplyr for some data wrangling
library(dplyr)
# Generating precomputed counts data
mpg_counted <- mpg %>%
count(class, name = 'count')
mpg_counted
# Change the stat to identity to recognize precomputed data
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
# geom_col is made for precomputed data
ggplot(mpg_counted) +
geom_col(aes(x = class, y = count))
# More data wrangling...
library(dplyr)
iris_stats <- iris %>%
group_by(Species) %>%
summarise_all(list(my_mean = mean,
my_sd = sd))
iris_stats
# Barplot with errorbars
ggplot(iris_stats, aes(x = Species, y = Sepal.Length_my_mean)) +
geom_col() +
# We have to set the upper and lower bounds of our error bar
geom_errorbar(aes(ymin = Sepal.Length_my_mean - Sepal.Length_my_sd,
ymax = Sepal.Length_my_mean + Sepal.Length_my_sd)) +
ylab("Mean Sepal Length (Cm) +- SD ")
# Stacked barplot, filling the plot area
ggplot(mpg) +
geom_bar(aes(x = class, fill = manufacturer), position = "fill") +
# shrink legend to fit on page
theme(legend.key.height = unit(0.1,"cm"))
# Stacked barplot, filling the plot area
ggplot(mpg) +
geom_bar(aes(x = class, fill = manufacturer), ) +
# shrink legend to fit on page
theme(legend.key.height = unit(0.1,"cm"))
# Stacked barplot, filling the plot area
ggplot(mpg) +
geom_bar(aes(x = class, fill = manufacturer), position = "fill") +
# shrink legend to fit on page
theme(legend.key.height = unit(0.1,"cm"))
?geom_bar
# You may have thought I was done showing this plot...
ggplot(mpg) +
# Calculating proportions
geom_bar(aes(x = class, y = after_stat(100 * count / sum(count))))
ggplot(iris, aes(x = Species, y = Petal.Width)) +
geom_jitter(width = 0.2)
ggplot(iris, aes(x = Species, y = Petal.Width)) +
geom_point()
ggplot(iris, aes(x = Species, y = Petal.Width)) +
geom_jitter(width = 1)
ggplot(iris, aes(x = Species, y = Petal.Width)) +
geom_jitter(width = 0.2) +
stat_summary(fun = mean, geom = "point", colour = "red", size = 3)
ggplot(mpg, aes(drv, hwy)) + geom_violin()
ggplot(mpg, aes(x = drv, y = hwy)) + geom_jitter(width = 0.25)
# Boxplot
ggplot(iris, aes(x = Species, y = Petal.Width))+
stat_boxplot()
# Boxplot
ggplot(iris, aes(x = Species, y = Petal.Width))+
geom_jitter(width = 0.4)
# Boxplot
ggplot(iris, aes(x = Species, y = Petal.Width))+
geom_jitter(width = 0.4) +
stat_boxplot()
# Boxplot
ggplot(iris, aes(x = Species, y = Petal.Width))+
geom_jitter(width = 0.4) +
stat_boxplot(aes(colour = Species), alpha = 0.3)
# Boxplot
ggplot(iris, aes(x = Species, y = Petal.Width))+
geom_jitter(width = 0.4) +
stat_boxplot(aes(fill = Species), alpha = 0.3)
?geom_boxplot
# Boxplot
ggplot(iris, aes(x = Species, y = Petal.Width))+
stat_boxplot(aes(fill = Species), alpha = 0.3)
# Boxplot
ggplot(iris, aes(x = Species, y = Petal.Width))+
geom_jitter(width = 0.4) +
stat_boxplot(aes(fill = Species), alpha = 0.3)
# Boxplot
ggplot(iris, aes(x = Species, y = Petal.Width))+
stat_boxplot()
# Small dataset
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_boxplot(aes(group = cut_width(Petal.Length, 7/4))) +
ggtitle("Iris dataset")
# Small dataset
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_boxplot(aes(group = cut_width(Petal.Length, 7/7))) +
ggtitle("Iris dataset")
# Small dataset
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
geom_boxplot(aes(group = cut_width(Petal.Length, 7/7))) +
ggtitle("Iris dataset")
# Large dataset
ggplot(diamonds, aes(x = carat, y = price)) +
geom_boxplot(aes(group = cut_width(carat, 0.1))) +
ggtitle("Diamonds dataset")
data(Oxboys, package = "nlme")
head(Oxboys)
# Grouping individuals across time
ggplot(Oxboys, aes(x = age, y = height, group = Subject)) +
geom_point() +
geom_line()
# Grouping individuals across time
ggplot(Oxboys, aes(x = age, y = height)) +
geom_point() +
geom_line()
# Grouping individuals across time
ggplot(Oxboys, aes(x = age, y = height, group = Subject)) +
geom_point() +
geom_line()
# Every layer is inheriting the group aesthetic...
ggplot(Oxboys, aes(x = age, y = height, group = Subject)) +
geom_line() +
geom_smooth(method = "lm", se = FALSE)
# Group is local to geom_line()
ggplot(Oxboys, aes(x = age, y = height)) +
geom_line(aes(group = Subject)) +
geom_smooth(method = "lm", se = FALSE, size = 2, colour = "red")
# Faceting onto one variable
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~ class)
# Faceting onto two variables
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(year ~ drv)
# Loading mammal data from traitform data package. If you are unable to install
# this package, use the pantheria dataset I have sent you.
library(traitdataform)
# Loading mammal data from traitform data package. If you are unable to install
# this package, use the pantheria dataset I have sent you.
library(traitdataform)
library(dplyr)
library(stringr)
# loading in pantheria dataset
pulldata("pantheria")
# Loading mammal data from traitform data package. If you are unable to install
# this package, use the pantheria dataset I have sent you.
library(traitdataform)
library(dplyr)
library(stringr)
# loading in pantheria dataset
pulldata("pantheria")
df <- pantheria
# Removing suffix from pantheria variables
vars <- colnames(df)
vars <- str_remove(vars, "^[:alnum:]+_") %>%
str_remove("^[:alnum:]+\\.[:digit:]_")
colnames(df) <- vars
# Filter for order rich mammals
df <- df %>%
group_by(Order) %>%
filter(n() >= 200)
df
# plotting body mass vs. longevity as a scatterplot
ggplot(data = df) +
geom_point(mapping = aes(x = AdultBodyMass_g, y = MaxLongevity_m))
# Transforming the axes
ggplot(data = df) +
geom_point(mapping = aes(x = AdultBodyMass_g, y = MaxLongevity_m)) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log")
# Transforming the variables
ggplot(data = df) +
geom_point(mapping = aes(x = log10(AdultBodyMass_g),
y = log(MaxLongevity_m),
colour = Order)) +
labs(title = "Body Size vs. Longevity in Mammals",
x = "(log10) Adult Body Size (g)",
y = "(ln) Maximum Longevity (m)")
data("mpg")
# Not an ideal plot
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
theme(legend.key.height = unit(0.1,"cm"))
library(RColorBrewer)
# Much better
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
# Adjusting the area size and removing 7 cylinder cars
scale_size_area(breaks = c(4,5,6,8)) +
#
scale_colour_brewer(palette = "Spectral") +
theme(legend.key.height = unit(0.1,"cm"))
# Much better
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
# Adjusting the area size and removing 7 cylinder cars
scale_size(breaks = c(4,5,6,8)) +
#
scale_colour_brewer(palette = "Spectral") +
theme(legend.key.height = unit(0.1,"cm"))
# Much better
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cyl)) +
# Adjusting the area size and removing 7 cylinder cars
scale_size_area(breaks = c(4,5,6,8)) +
#
scale_colour_brewer(palette = "Spectral") +
theme(legend.key.height = unit(0.1,"cm"))
RColorBrewer::display.brewer.all()
# String vector of the poll choices
results <- c( 'Never used', 'Once or twice', 'Over a dozen times', 'Regularly'
)
#  Precomputed counts dataframe to use for plotting
pie <- data.frame(
lab = factor(results, levels = results),
amount = c(7, 1, 0, 1),
stringsAsFactors = FALSE
)
#  Precomputed counts dataframe to use for plotting
pie <- data.frame(
lab = factor(results, levels = results),
amount = c(7, 1, 0, 1),
stringsAsFactors = FALSE
)
pie
# Stacked barplot
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = lab))
# Pie chart
ggplot(pie) +
geom_col(aes(x = 0, y = amount, fill = lab), colour = "black") +
# projects onto a polar coordinate system
coord_polar(theta = 'y') +
# Changes legend title
guides(fill = guide_legend(title = "R users in the lab")) +
# Sets a white background
theme_bw() +
# Removes axis info and panel graphics
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
xlab("Vehicle Displacement (L)") +
ylab("Highway Miles per Gallon") +
ggtitle(expression(italic("Cars..."))) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 18, colour = "orange"))
?theme
library(viridisLite)
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "None") +
scale_fill_viridis_d()
library(patchwork)
p1 <- ggplot(mpg) + geom_histogram(aes(cty))
p2 <- ggplot(mpg) + geom_point(aes(displ, hwy))
p3 <- ggplot(mpg) + geom_boxplot(aes(class, hwy))
(p1 + p2) / p3
setwd("C:/Users/Zjardyn/OneDrive - University of Waterloo/ggplot")
